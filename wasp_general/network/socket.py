# -*- coding: utf-8 -*-
# wasp_general/network/socket.py
#
# Copyright (C) 2017 the wasp-general authors and contributors
# <see AUTHORS file>
#
# This file is part of wasp-general.
#
# Wasp-general is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Wasp-general is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with wasp-general.  If not, see <http://www.gnu.org/licenses/>.

# noinspection PyUnresolvedReferences
from wasp_general.version import __author__, __version__, __credits__, __license__, __copyright__, __email__
# noinspection PyUnresolvedReferences
from wasp_general.version import __status__

import socket
from abc import ABCMeta, abstractmethod

from wasp_general.verify import verify_type, verify_subclass
from wasp_general.uri import WURI, WSchemeHandler, WSchemeCollection, WSchemeSpecification
from wasp_general.config import WConfigSelection


class WSocketFactoryItemProto(WSchemeHandler, metaclass=ABCMeta):
	""" Abstract socket descriptor (item) that can be produced by a "factory" from URI. As a
	:class:`.WSchemeHandler` class, a factory produces items by calling :meth:`.WSchemeHandler.create_handler`
	method
	"""

	@verify_type(socket_obj=socket.socket)
	def __init__(self, socket_obj):
		""" Create an item with a socket object generated by a factory

		:param socket_obj: socket object to keep
		"""
		WSchemeHandler.__init__(self)
		self.__socket = socket_obj

	def socket(self):
		""" Return socket object, generated from URI by a factory

		:return: socket.socket
		"""
		return self.__socket

	@classmethod
	@abstractmethod
	@verify_type(config_selection=(WConfigSelection, None))
	@verify_type('paranoid', uri=WURI)
	def create_handler(cls, uri, *args, config_selection=None, **kwargs):
		""" :meth:`.WSchemeHandler.create_handler` method implementation

		:param uri: as uri argument in :meth:`.WSchemeHandler.create_handler` method
		:param args: as args argument in :meth:`.WSchemeHandler.create_handler` method
		:param config_selection: configuration that may be used to tweak a socket object
		:param kwargs: as kwargs argument in :meth:`.WSchemeHandler.create_handler` method

		:return: WSocketFactoryItemProto
		"""
		raise NotImplementedError('This method is abstract')


class WTCPUDPSocketFactoryItem(WSocketFactoryItemProto):
	""" Item, that generalize TCP/UDP socket
	"""

	@classmethod
	def scheme_specification(cls):
		""" :meth:`.WSchemeHandler.scheme_specification` method implementation

		URI scheme is a result of :meth:`.WTCPUDPSocketFactoryItem.protocol` method call
		"""
		return WSchemeSpecification(
			cls.protocol(),
			hostname=WSchemeSpecification.ComponentDescriptor.optional,
			port=WSchemeSpecification.ComponentDescriptor.optional
		)

	@classmethod
	@abstractmethod
	def protocol(cls):
		""" Return protocol name (that is used as a URI scheme)

		:return: str
		"""
		raise NotImplementedError('This method is abstract')

	@classmethod
	def default_port(cls):
		""" Return default port number. This port will be used for binding if no port is specified in a URI.
		-1 is returned if there is no default port. If a socket required a binding and no port is specified in
		a URI or as a default port, then an exception will be raised.

		:return: int
		"""
		return -1

	@classmethod
	@verify_type('paranoid', uri=WURI, config_selection=(WConfigSelection, None))
	def create_handler(cls, uri, *args, config_selection=None, **kwargs):
		""" :meth:`.WSocketFactoryItemProto.create_handler` implementation. A socket, that is created by this
		method is created in the following order:
		1. :meth:`.WSocketFactoryItemProto.create_socket` is used for creating a socket
		2. :meth:`.WSocketFactoryItemProto.configure_socket` is used for setting up a socket
		(setting a socket options like SO_REUSEADDR and so on)
		3. :meth:`.WSocketFactoryItemProto.bind_socket` for binding a socket to an address, that was specified
		is URI

		:param uri: as uri argument in :meth:`.WSchemeHandler.create_handler` method
		:param args: as args argument in :meth:`.WSchemeHandler.create_handler` method
		:param config_selection: as args argument in :meth:`.WSocketFactoryItemProto.create_handler` method
		:param kwargs: as kwargs argument in :meth:`.WSchemeHandler.create_handler` method

		:return: WTCPUDPSocketFactoryItem
		"""
		socket_obj = cls.create_socket(uri, config_selection=config_selection)
		socket_obj = cls.configure_socket(socket_obj, uri, config_selection=config_selection)
		socket_obj = cls.bind_socket(socket_obj, uri, config_selection=config_selection)
		return cls(socket_obj)

	@classmethod
	@verify_type(uri=WURI, config_selection=(WConfigSelection, None))
	def create_socket(cls, uri, config_selection=None):
		""" Create a socket object

		:param uri: original URI
		:param config_selection: original configuration

		:return: socket.socket
		"""
		return socket.socket(socket.AF_INET, cls.socket_type())

	@classmethod
	@verify_type(uri=WURI, config_selection=(WConfigSelection, None))
	def configure_socket(cls, socket_obj, uri, config_selection=None):
		""" Setting up a socket. When configuration section is specified, then following options are used:
		- '.reuseaddr' - boolean option, when defined and is True, socket.SO_REUSEADDR option is set

		:param socket_obj: socket object for setting up
		:param uri: original URI
		:param config_selection: configuration that is used for setting up

		:return: socket.socket
		"""
		if config_selection is not None:
			if config_selection.has_option('.reuseaddr') and bool(config_selection['.reuseaddr']) is True:
				socket_obj.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
		return socket_obj

	@classmethod
	@verify_type(uri=WURI, config_selection=(WConfigSelection, None))
	def bind_socket(cls, socket_obj, uri, config_selection=None):
		""" Bind a socket to an address, that is specified in URI.

		:param socket_obj: socket to bind
		:param uri: URI that is used for binding socket
		:param config_selection: original configuration

		:return: socket.socket
		"""
		port = uri.port()
		address = uri.hostname()

		if address is not None or port is not None:
			if address is None:
				address = ''
			if port is None:
				port = cls.default_port()

			if port > 0:
				socket_obj.bind((address, port))
		return socket_obj

	@classmethod
	@abstractmethod
	def socket_type(cls):
		""" Return socket type for newly created socket object (like SOCK_STREAM or SOCK_DGRAM).

		:return: socket.SocketKind
		"""
		raise NotImplementedError('This method is abstract')


class WTCPSocketFactoryItem(WTCPUDPSocketFactoryItem):
	""" Factory item for a TCP socket
	"""

	@classmethod
	def protocol(cls):
		""" Return protocol name. :meth:`.WTCPUDPSocketFactoryItem.protocol` implementation

		:return: str
		"""
		return 'tcp'

	@classmethod
	def socket_type(cls):
		""" Return socket type for TCP. :meth:`.WTCPUDPSocketFactoryItem.protocol` implementation

		:return: socket.SocketKind
		"""
		return socket.SOCK_STREAM


class WUDPSocketFactoryItem(WTCPUDPSocketFactoryItem):
	""" Factory item for a UDP socket
	"""

	@classmethod
	def protocol(cls):
		""" Return protocol name. :meth:`.WTCPUDPSocketFactoryItem.protocol` implementation

		:return: str
		"""
		return 'udp'

	@classmethod
	def socket_type(cls):
		""" Return socket type for UDP. :meth:`.WTCPUDPSocketFactoryItem.protocol` implementation

		:return: socket.SocketKind
		"""
		return socket.SOCK_DGRAM


class WSocketFactory(WSchemeCollection):
	""" Factory that is used for creating (and preparing) socket object by a URI and an optional configuration
	"""

	def __init__(self):
		""" Create a factory, that has an ability for creating TCP and UDP sockets
		"""
		WSchemeCollection.__init__(self, WTCPSocketFactoryItem, WUDPSocketFactoryItem)

	@verify_type('paranoid', uri=WURI, config_selection=(WConfigSelection, None))
	def create_socket(self, uri, config_selection=None, **kwargs):
		""" An alias for :meth:`.WSocketFactory.open` method call
		"""
		return self.open(uri, config_selection=config_selection, **kwargs)

	@verify_type(config_selection=(WConfigSelection, None))
	@verify_type('paranoid', uri=WURI)
	def open(self, uri, config_selection=None, **kwargs):
		""" :meth:`.WSchemeCollection.open` method is override with an additional type check
		"""
		return WSchemeCollection.open(self, uri, config_selection=config_selection, **kwargs)

	@verify_subclass(scheme_handler_cls=WSocketFactoryItemProto)
	def add(self, scheme_handler_cls):
		""" :meth:`.WSchemeCollection.add` method is override with an additional type check
		"""
		return WSchemeCollection.add(self, scheme_handler_cls)
